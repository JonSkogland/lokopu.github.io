[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jon Skogland",
    "section": "",
    "text": "This is my personal page, where I’m going to share thoughts, learnings and things that I pursue.  Click the above Posts link to see my recent posts  You can follow me here:\n\nMy Github: @JonSkogland"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Aug 6, 2025 - Exploratory Data Analysis af adgangsgrundlag for vidergående uddannelser\n\n\n Jul 1, 2025 - Day 20 - Plotting practice\n\n\n Jun 30, 2025 - Day 19 - DecisionTreeRegressor\n\n\n Jun 29, 2025 - Day 18 - Pandas and Altair\n\n\n Jun 28, 2025 - Day 17 - Formula 1 API\n\n\n Jun 27, 2025 - Day 16 - Tracking of ISS on globe\n\n\n Jun 26, 2025 - Day 15 - Classification\n\n\n Jun 25, 2025 - Day 14 - Pandas exploration\n\n\n Jun 24, 2025 - Day 13 - Weather API\n\n\n Jun 22, 2025 - Day 12 - TicTacToe\n\n\n Jun 21, 2025 - Day 11 - Rock, Paper, Scissor\n\n\n Jun 20, 2025 - Day 10 - Retrieving by books by subject with API\n\n\n Jun 19, 2025 - Day 9 - Retrieving image with API\n\n\n Jun 18, 2025 - Day 8 - Dice roll generator\n\n\n Jun 17, 2025 - Day 7 - Price optimization\n\n\n Jun 16, 2025 - Day 6 - multivariate linear regression\n\n\n Jun 15, 2025 - Day 5 - Web scraping\n\n\n Jun 14, 2025 - Day 4 - API and SQL\n\n\n Jun 13, 2025 - Day 3 - data wrangling and plotting\n\n\n Jun 12, 2025 - Day 2 - Linear regression on big mac price vs GDP\n\n\n Jun 11, 2025 - Day 1 - Linear regression on numerical data\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Day 13 - weather api.html",
    "href": "posts/Day 13 - weather api.html",
    "title": "Day 13 - Weather API",
    "section": "",
    "text": "Used an API from Open-meteoto fetch weather data and create some charts to display the next few days forecast.\nSee jupyter notebook here."
  },
  {
    "objectID": "posts/Day 8 - Python challenge.html",
    "href": "posts/Day 8 - Python challenge.html",
    "title": "Day 8 - Dice roll generator",
    "section": "",
    "text": "For lack of inspiration today, I solved a challenge put forth on the internet: https://www.reddit.com/r/dailyprogrammer/comments/8s0cy1/20180618_challenge_364_easy_create_a_dice_roller/\nThe goal was to create a dice rolling program that takes the input e.g. “2d10”, meaning rolling 2 dice of 10 sides. Whereby the program will return the cumulative sum of the dice rolls.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 7 - price optimization.html",
    "href": "posts/Day 7 - price optimization.html",
    "title": "Day 7 - Price optimization",
    "section": "",
    "text": "Tried my hand at price optimization - although heavily based on this guide: https://medium.com/operations-research-bit/a-practical-guide-to-pricing-optimisation-using-machine-learning-5ec4bf7f0d4c - as I have never done price optimization before.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 3 - data wrangling and plotting.html",
    "href": "posts/Day 3 - data wrangling and plotting.html",
    "title": "Day 3 - data wrangling and plotting",
    "section": "",
    "text": "Today I focused on using pandas and plotting using altair to improve those skills. The dataset of the day is again from the economist and can be viewed here\nToday was a bit easier compared to the previous days as they lack machine learning usage.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 21 - Uddannelse.html",
    "href": "posts/Day 21 - Uddannelse.html",
    "title": "Exploratory Data Analysis af adgangsgrundlag for vidergående uddannelser",
    "section": "",
    "text": "Exploratory Data Analysis af adgangsgrundlag for videregående uddannelser\nData hentet fra UFM - Link\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_excel(\"data/day21/Ansøgere_adgangsgrundlag.xlsx\")\n\n/Users/jonskogland/Documents/hjemmeside - Jon Skogland/lokopu.github.io/venv/lib/python3.13/site-packages/openpyxl/styles/stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default\n  warn(\"Workbook contains no default style, apply openpyxl's default\")\n\n\n\ndf\n\n\n\n\n\n\n\n\nDen Koordinerede Tilmelding\nUnnamed: 1\nUnnamed: 2\n1. prioritets-ansøgere fordelt på adgangsgrundlag\nUnnamed: 4\nUnnamed: 5\nUnnamed: 6\nUnnamed: 7\nUnnamed: 8\nUnnamed: 9\n...\nUnnamed: 11\nUnnamed: 12\nUnnamed: 13\nUnnamed: 14\nUnnamed: 15\nUnnamed: 16\nUnnamed: 17\nUnnamed: 18\nUnnamed: 19\nUnnamed: 20\n\n\n\n\n0\nNaN\nNaN\nNaN\n22-juli-2024\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\n1=stx\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nNaN\nNaN\nNaN\n2=hf\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nNaN\n3=hhx\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n944\n8800\nErhvervsakademi Dania\n84410\nProduktionsteknolog, Randers SØ, Studiestart: ...\n6\nNaN\n1.0\n1.0\nNaN\n1.0\n...\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\n\n\n945\n8800\nErhvervsakademi Dania\n86160\nService- og oplevelsesøkonom, Randers SØ, Stud...\n15\n1\n7.0\n1.0\n3.0\nNaN\n...\nNaN\nNaN\n1.0\n1.0\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\n\n\n946\n8800\nErhvervsakademi Dania\n86164\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n45\nNaN\n12.0\n10.0\n3.0\n4.0\n...\nNaN\nNaN\n5.0\n7.0\nNaN\n1.0\nNaN\n1.0\n1.0\n1.0\n\n\n947\n8800\nErhvervsakademi Dania\n86166\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n9\nNaN\n1.0\n3.0\n4.0\nNaN\n...\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n948\n8800\nErhvervsakademi Dania\n87110\nLogistikøkonom , Hobro, Studiestart: sommerstart\n15\nNaN\n4.0\n5.0\n4.0\n1.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n949 rows × 21 columns\n\n\n\nHer ses det at dataframe’en har nogle header rækker øverst som skal filtreres fra, samtidigt er der data som skal bruges til at indsætte navne på adgangsgrundlagene for kolonnerne fra 4 og frem. da der ellers kun står et tal som er svært at læse.\n\nadgange = df.head(17)\n\n\nadgange = adgange.iloc[2:,3]\n\n\nadgange = adgange.str.split(\"=\", expand=True)\n\n\nadgange = adgange.rename(columns={0: \"id\", 1: \"adgangsgrundlag\"})\n\n\nadgange\n\n\n\n\n\n\n\n\nid\nadgangsgrundlag\n\n\n\n\n2\n1\nstx\n\n\n3\n2\nhf\n\n\n4\n3\nhhx\n\n\n5\n4\nhtx\n\n\n6\n5\nInternational Baccalaureate (IB)\n\n\n7\n6\nGIF\n\n\n8\n7\nAdgangseksamen for ingeniøruddannelser\n\n\n9\n8\nErhvervsuddannelse (EUD)\n\n\n10\n9\nAndet adgangsgrundlag\n\n\n11\n10\nInternational Baccalaureate (IB) fra udlandet\n\n\n12\n11\nAnden adgangsgivende eksamen fra ud-landet\n\n\n13\n12\neux\n\n\n14\n13\neux 1. del\n\n\n15\n14\nFærøsk gymnasial eksamen\n\n\n16\n15\nGrønlandsk gymnasial eksamen\n\n\n\n\n\n\n\n\ndf = df.iloc[18:]\n\n\nnew_header = df.iloc[0]\ndf = df[1:]\ndf.columns = new_header \n\nSå er hoveddataene fra excelarket korrekt afgrænset og det har fået de korrekte kolonner\n\ndf\n\n\n\n\n\n\n\n18\nInstNr\nInstNavn\nOptNr\nOptNavn\nI alt\nUoplyst\n1.0\n2.0\n3.0\n4.0\n...\n6.0\n7.0\n8.0\n9.0\n10.0\n11.0\n12.0\n13.0\n14.0\n15.0\n\n\n\n\n19\n1000\nKøbenhavns Universitet\n10110\nMedicin, København Ø, Studiestart: sommer- og ...\n1687\n4\n1107.0\n111.0\n14.0\n116.0\n...\n11.0\nNaN\n1.0\n10.0\n11.0\n240.0\n1.0\n2.0\n13.0\n1.0\n\n\n20\n1000\nKøbenhavns Universitet\n10112\nMedicin, Køge, Studiestart: sommer- og vinters...\n234\nNaN\n147.0\n25.0\n1.0\n38.0\n...\nNaN\nNaN\n2.0\n3.0\n1.0\n10.0\nNaN\nNaN\nNaN\nNaN\n\n\n21\n1000\nKøbenhavns Universitet\n10115\nFolkesundhedsvidenskab, København K, Studiesta...\n88\nNaN\n81.0\n3.0\nNaN\n1.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n2.0\nNaN\nNaN\nNaN\n1.0\n\n\n22\n1000\nKøbenhavns Universitet\n10117\nFarmaci, København Ø, Studiestart: sommerstart\n291\nNaN\n194.0\n32.0\n2.0\n44.0\n...\n7.0\nNaN\nNaN\n3.0\nNaN\n4.0\nNaN\nNaN\n3.0\nNaN\n\n\n23\n1000\nKøbenhavns Universitet\n10120\nOdontologi, København Ø, Studiestart: sommerstart\n471\n1\n310.0\n46.0\n8.0\n54.0\n...\n8.0\nNaN\n1.0\n5.0\nNaN\n27.0\nNaN\nNaN\n7.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n944\n8800\nErhvervsakademi Dania\n84410\nProduktionsteknolog, Randers SØ, Studiestart: ...\n6\nNaN\n1.0\n1.0\nNaN\n1.0\n...\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\n\n\n945\n8800\nErhvervsakademi Dania\n86160\nService- og oplevelsesøkonom, Randers SØ, Stud...\n15\n1\n7.0\n1.0\n3.0\nNaN\n...\nNaN\nNaN\n1.0\n1.0\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\n\n\n946\n8800\nErhvervsakademi Dania\n86164\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n45\nNaN\n12.0\n10.0\n3.0\n4.0\n...\nNaN\nNaN\n5.0\n7.0\nNaN\n1.0\nNaN\n1.0\n1.0\n1.0\n\n\n947\n8800\nErhvervsakademi Dania\n86166\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n9\nNaN\n1.0\n3.0\n4.0\nNaN\n...\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n948\n8800\nErhvervsakademi Dania\n87110\nLogistikøkonom , Hobro, Studiestart: sommerstart\n15\nNaN\n4.0\n5.0\n4.0\n1.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n930 rows × 21 columns\n\n\n\nOvenstående dataframe er dog i wide format og det vil derfor være besværligt at lave analyse på. Derfor skal kolonnerne 1-15 pivoteres sådan at vi får to kolonner i stedet: “adgangsrundlag”, hvor værdierne vil være teksten på den uddannelse de studerende kommer fra, og “ansøgere” som vil være det antal som har søgt uddannelsen fra det givne adgangsgrundlag - denne vil erstatte “i alt” kolonnen da denne kan summeres efterfølgende.\n\nres = df.columns.tolist()\n\n\nres\n\n['InstNr',\n 'InstNavn',\n 'OptNr',\n 'OptNavn',\n 'I alt',\n 'Uoplyst',\n np.float64(1.0),\n np.float64(2.0),\n np.float64(3.0),\n np.float64(4.0),\n np.float64(5.0),\n np.float64(6.0),\n np.float64(7.0),\n np.float64(8.0),\n np.float64(9.0),\n np.float64(10.0),\n np.float64(11.0),\n np.float64(12.0),\n np.float64(13.0),\n np.float64(14.0),\n np.float64(15.0)]\n\n\n\nres = res[0:5]\n\n\nmelted = pd.melt(df, id_vars=res)\n\n\nmelted\n\n\n\n\n\n\n\n\nInstNr\nInstNavn\nOptNr\nOptNavn\nI alt\n18\nvalue\n\n\n\n\n0\n1000\nKøbenhavns Universitet\n10110\nMedicin, København Ø, Studiestart: sommer- og ...\n1687\nUoplyst\n4\n\n\n1\n1000\nKøbenhavns Universitet\n10112\nMedicin, Køge, Studiestart: sommer- og vinters...\n234\nUoplyst\nNaN\n\n\n2\n1000\nKøbenhavns Universitet\n10115\nFolkesundhedsvidenskab, København K, Studiesta...\n88\nUoplyst\nNaN\n\n\n3\n1000\nKøbenhavns Universitet\n10117\nFarmaci, København Ø, Studiestart: sommerstart\n291\nUoplyst\nNaN\n\n\n4\n1000\nKøbenhavns Universitet\n10120\nOdontologi, København Ø, Studiestart: sommerstart\n471\nUoplyst\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14875\n8800\nErhvervsakademi Dania\n84410\nProduktionsteknolog, Randers SØ, Studiestart: ...\n6\n15.0\nNaN\n\n\n14876\n8800\nErhvervsakademi Dania\n86160\nService- og oplevelsesøkonom, Randers SØ, Stud...\n15\n15.0\nNaN\n\n\n14877\n8800\nErhvervsakademi Dania\n86164\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n45\n15.0\n1.0\n\n\n14878\n8800\nErhvervsakademi Dania\n86166\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n9\n15.0\nNaN\n\n\n14879\n8800\nErhvervsakademi Dania\n87110\nLogistikøkonom , Hobro, Studiestart: sommerstart\n15\n15.0\nNaN\n\n\n\n\n14880 rows × 7 columns\n\n\n\nNy mangler vi dog at “mappe” de forskelle adgangsgrundlag id’er sådan at der står det faktiske adgangsgrundlag og ikke tallet.\n\nd = {}\nfor index, row in adgange.iterrows():\n    d[float(row[\"id\"])] = row[\"adgangsgrundlag\"]\n\nd\n\n{1.0: 'stx',\n 2.0: 'hf',\n 3.0: 'hhx',\n 4.0: 'htx',\n 5.0: 'International Baccalaureate (IB)',\n 6.0: 'GIF',\n 7.0: 'Adgangseksamen for ingeniøruddannelser',\n 8.0: 'Erhvervsuddannelse (EUD)',\n 9.0: 'Andet adgangsgrundlag',\n 10.0: 'International Baccalaureate (IB) fra udlandet',\n 11.0: 'Anden adgangsgivende eksamen fra ud-landet',\n 12.0: 'eux',\n 13.0: 'eux 1. del',\n 14.0: 'Færøsk gymnasial eksamen',\n 15.0: 'Grønlandsk gymnasial eksamen'}\n\n\n\npd.set_option('future.no_silent_downcasting', False)\n#melted[18] = melted[18].replace(\"Uoplyst\", np.nan).infer_objects(copy=False)\n\n\nmelted[\"adgangsgrundlag\"] = melted[18].map(d)\n\n\nmelted = melted.drop(columns=18)\n\n\nmelted = melted.rename(columns={\"value\": \"antal\"})\n\n\nmelted[\"adgangsgrundlag\"] = melted[\"adgangsgrundlag\"].replace(np.nan, \"Uoplyst\").infer_objects(copy=False)\n\n\nmelted\n\n\n\n\n\n\n\n\nInstNr\nInstNavn\nOptNr\nOptNavn\nI alt\nantal\nadgangsgrundlag\n\n\n\n\n0\n1000\nKøbenhavns Universitet\n10110\nMedicin, København Ø, Studiestart: sommer- og ...\n1687\n4\nUoplyst\n\n\n1\n1000\nKøbenhavns Universitet\n10112\nMedicin, Køge, Studiestart: sommer- og vinters...\n234\nNaN\nUoplyst\n\n\n2\n1000\nKøbenhavns Universitet\n10115\nFolkesundhedsvidenskab, København K, Studiesta...\n88\nNaN\nUoplyst\n\n\n3\n1000\nKøbenhavns Universitet\n10117\nFarmaci, København Ø, Studiestart: sommerstart\n291\nNaN\nUoplyst\n\n\n4\n1000\nKøbenhavns Universitet\n10120\nOdontologi, København Ø, Studiestart: sommerstart\n471\n1\nUoplyst\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14875\n8800\nErhvervsakademi Dania\n84410\nProduktionsteknolog, Randers SØ, Studiestart: ...\n6\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14876\n8800\nErhvervsakademi Dania\n86160\nService- og oplevelsesøkonom, Randers SØ, Stud...\n15\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14877\n8800\nErhvervsakademi Dania\n86164\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n45\n1.0\nGrønlandsk gymnasial eksamen\n\n\n14878\n8800\nErhvervsakademi Dania\n86166\nService- og oplevelsesøkonom, Randers SØ, E-læ...\n9\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14879\n8800\nErhvervsakademi Dania\n87110\nLogistikøkonom , Hobro, Studiestart: sommerstart\n15\nNaN\nGrønlandsk gymnasial eksamen\n\n\n\n\n14880 rows × 7 columns\n\n\n\n\n# Finde InstNavn for CBS\nmelted[\"InstNavn\"].unique()\n\narray(['Københavns Universitet',\n       'Copenhagen Business School - Handelshøjskolen',\n       'IT-Universitetet i København', 'Danmarks Tekniske Universitet',\n       'Roskilde Universitet', 'Syddansk Universitet',\n       'Aarhus Universitet', 'Aalborg Universitet',\n       'Det Kongelige Akademi - Arkitektur, Design, Konservering',\n       'Arkitektskolen Aarhus', 'Designskolen Kolding',\n       'Københavns Professionshøjskole', 'Professionshøjskolen Absalon',\n       'Professionshøjskolen UC Syddanmark',\n       'UCL Erhvervsakademi og Professionshøjskole',\n       'Professionshøjskolen VIA University College',\n       'Professionshøjskolen University College Nordjylland',\n       'Danmarks Medie- og Journalisthøjskole', 'Den Frie Lærerskole',\n       'Maskinmesterskolen København',\n       'Svendborg International Maritime Academy, SIMAC',\n       'Fredericia Maskinmesterskole', 'Aarhus Maskinmesterskole',\n       'MARTEC - Maritime and Polytechnic University College',\n       'Erhvervsakademiet Copenhagen Business Academy',\n       'Københavns Erhvervsakademi (KEA)',\n       'Zealand Sjællands Erhvervsakademi', 'IBA Erhvervsakademi Kolding',\n       'Erhvervsakademi SydVest', 'Erhvervsakademi MidtVest',\n       'Erhvervsakademi Aarhus', 'Erhvervsakademi Dania'], dtype=object)\n\n\n\n# Filtrere CBS\nCBS = melted[melted[\"InstNavn\"] == \"Copenhagen Business School - Handelshøjskolen\"]\n\n\nCBS\n\n\n\n\n\n\n\n\nInstNr\nInstNavn\nOptNr\nOptNavn\nI alt\nantal\nadgangsgrundlag\n\n\n\n\n75\n1300\nCopenhagen Business School - Handelshøjskolen\n13010\nErhvervsøkonomi, HA, Frederiksberg, Studiestar...\n925\nNaN\nUoplyst\n\n\n76\n1300\nCopenhagen Business School - Handelshøjskolen\n13015\nErhvervsøkonomi-informationsteknologi, HA (it....\n223\nNaN\nUoplyst\n\n\n77\n1300\nCopenhagen Business School - Handelshøjskolen\n13020\nErhvervsøkonomi-erhvervsret, HA (jur.), Freder...\n305\nNaN\nUoplyst\n\n\n78\n1300\nCopenhagen Business School - Handelshøjskolen\n13023\nErhvervsøkonomi og markeds- og kulturanalyse, ...\n251\nNaN\nUoplyst\n\n\n79\n1300\nCopenhagen Business School - Handelshøjskolen\n13025\nErhvervsøkonomi-matematik, HA (mat.), Frederik...\n89\nNaN\nUoplyst\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14039\n1300\nCopenhagen Business School - Handelshøjskolen\n13085\nBusiness, Asian Language and Culture - Interna...\n71\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14040\n1300\nCopenhagen Business School - Handelshøjskolen\n13090\nBusiness, Asian Language and Culture - Interna...\n72\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14041\n1300\nCopenhagen Business School - Handelshøjskolen\n13100\nBusiness Administration and Digital Management...\n601\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14042\n1300\nCopenhagen Business School - Handelshøjskolen\n13280\nInternational Shipping and Trade, Frederiksber...\n272\nNaN\nGrønlandsk gymnasial eksamen\n\n\n14043\n1300\nCopenhagen Business School - Handelshøjskolen\n13290\nEuropæisk business, HA i europæisk business, F...\n273\nNaN\nGrønlandsk gymnasial eksamen\n\n\n\n\n304 rows × 7 columns\n\n\n\nTilføjelse af procent kolonne\n\nimport altair as alt\n\n\n# lave ny kolonnen med procent af total med givne adgangsgrundlag\nmelted[\"procent\"] = (melted[\"antal\"] / melted[\"I alt\"])\n\n\nmelted.dtypes\n\nInstNr             object\nInstNavn           object\nOptNr              object\nOptNavn            object\nI alt              object\nantal              object\nadgangsgrundlag    object\nprocent            object\ndtype: object\n\n\n\nmelted['procent'].astype('float')\n\n0        0.002371\n1             NaN\n2             NaN\n3             NaN\n4        0.002123\n           ...   \n14875         NaN\n14876         NaN\n14877    0.022222\n14878         NaN\n14879         NaN\nName: procent, Length: 14880, dtype: float64\n\n\n\ncbs_stx = melted[(melted['InstNr']== 1300) & (melted['adgangsgrundlag'] == 'stx')]\n\n\nalt.Chart(cbs_stx).mark_point().encode(\n    y=alt.Y('OptNavn', axis=alt.Axis(labelAngle=0, labelLimit=0, titlePadding=400)),\n    x=\"procent\"\n)\n\n\n\n\n\n\n\nHer kan man altså se procentandelen af studerende for hver CBS Bachelor uddannelse, hvor den studerende har STX som adgangsgrundlag. Her giver det mening at de uddannelse med en STX procent på under 0.3 er på engelsk, hvor er vil være mange udenlandske studerende som derfor ikke har gået på STX. De engelske uddannelse ville give mening at analysere ved at se procentandelen af STX hvor udenlandske studerende er talt fra for at få en ide om hvilke grundlag de danske studerende har.\n\ncbs = melted[melted['InstNr'] == 1300]\n\n\npd.set_option('future.no_silent_downcasting', True)\ncbs.loc[:, 'antal'] = cbs['antal'].fillna(0)\ncbs.loc[:, 'procent'] = cbs['procent'].fillna(0)\n\n\ncbs\n\n\n\n\n\n\n\n\nInstNr\nInstNavn\nOptNr\nOptNavn\nI alt\nantal\nadgangsgrundlag\nprocent\n\n\n\n\n75\n1300\nCopenhagen Business School - Handelshøjskolen\n13010\nErhvervsøkonomi, HA, Frederiksberg, Studiestar...\n925\n0\nUoplyst\n0\n\n\n76\n1300\nCopenhagen Business School - Handelshøjskolen\n13015\nErhvervsøkonomi-informationsteknologi, HA (it....\n223\n0\nUoplyst\n0\n\n\n77\n1300\nCopenhagen Business School - Handelshøjskolen\n13020\nErhvervsøkonomi-erhvervsret, HA (jur.), Freder...\n305\n0\nUoplyst\n0\n\n\n78\n1300\nCopenhagen Business School - Handelshøjskolen\n13023\nErhvervsøkonomi og markeds- og kulturanalyse, ...\n251\n0\nUoplyst\n0\n\n\n79\n1300\nCopenhagen Business School - Handelshøjskolen\n13025\nErhvervsøkonomi-matematik, HA (mat.), Frederik...\n89\n0\nUoplyst\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14039\n1300\nCopenhagen Business School - Handelshøjskolen\n13085\nBusiness, Asian Language and Culture - Interna...\n71\n0\nGrønlandsk gymnasial eksamen\n0\n\n\n14040\n1300\nCopenhagen Business School - Handelshøjskolen\n13090\nBusiness, Asian Language and Culture - Interna...\n72\n0\nGrønlandsk gymnasial eksamen\n0\n\n\n14041\n1300\nCopenhagen Business School - Handelshøjskolen\n13100\nBusiness Administration and Digital Management...\n601\n0\nGrønlandsk gymnasial eksamen\n0\n\n\n14042\n1300\nCopenhagen Business School - Handelshøjskolen\n13280\nInternational Shipping and Trade, Frederiksber...\n272\n0\nGrønlandsk gymnasial eksamen\n0\n\n\n14043\n1300\nCopenhagen Business School - Handelshøjskolen\n13290\nEuropæisk business, HA i europæisk business, F...\n273\n0\nGrønlandsk gymnasial eksamen\n0\n\n\n\n\n304 rows × 8 columns\n\n\n\n\nalt.Chart(cbs).mark_bar().encode(\n    y=alt.Y('OptNavn', axis=alt.Axis(labelAngle=0, labelLimit=0, titlePadding=400)),\n    x=\"procent\",\n    color='adgangsgrundlag'\n)\n\n\n\n\n\n\n\nHer kan vi se fordelingen af adgangsgrundlag mere tydeligt. Hvor STX og HHX dominerer på de danske uddannelser hos CBS.\nTil en videre analyse, ville det være interessant at sammenligne fordelingen med procentandelen af adgangsgrundlagene for STX, HHX osv. for at tyde om HHX’ere i højere grad søger CBS end STX relativt til antal studerende. Desuden at sammenligne med andre erhvervsøkonomiske uddannelser og se hvorledes deres fordelinger er."
  },
  {
    "objectID": "posts/Day 15 - Classification.html",
    "href": "posts/Day 15 - Classification.html",
    "title": "Day 15 - Classification",
    "section": "",
    "text": "Dataset was retrieved from here.\nSee jupyter notebook here."
  },
  {
    "objectID": "posts/Day 12 - TicTacToe.html",
    "href": "posts/Day 12 - TicTacToe.html",
    "title": "Day 12 - TicTacToe",
    "section": "",
    "text": "Today I created tictactoe - with limitations. I didn’t get around to test human input properly. You can’t win through diagonals yet… I know it is possible with numpy, but didn’t have the time. Also if it is a tie, the program keeps running.\nCode can be viewed here."
  },
  {
    "objectID": "posts/Day 20 - Plotting practice.html",
    "href": "posts/Day 20 - Plotting practice.html",
    "title": "Day 20 - Plotting practice",
    "section": "",
    "text": "Some plotting practice today.\nThe jupyter notebook can be viewed here"
  },
  {
    "objectID": "posts/Day 17 - Formula 1 API.html",
    "href": "posts/Day 17 - Formula 1 API.html",
    "title": "Day 17 - Formula 1 API",
    "section": "",
    "text": "Today I explored some Formula 1 data. Particularly i checked out the weather data for the Austrian Grandprix, which is happening this weekend.\nHere I become more familiar with datetime datatypes and their filtering. Link to code"
  },
  {
    "objectID": "posts/Day 2  - 1000 days of coding.html",
    "href": "posts/Day 2  - 1000 days of coding.html",
    "title": "Day 2 - Linear regression on big mac price vs GDP",
    "section": "",
    "text": "Today I used a datasetfrom The Economist of big mac prices and GDP across countries. I used this data to create a linear regression model to predict big mac prices based on GDP.\nAgain, like yesterday, I used Scikit-Learn and their linear regression model. As I’m still new to this space, I used guidance and code from this data science book.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 1 - 1000 days of coding.html",
    "href": "posts/Day 1 - 1000 days of coding.html",
    "title": "Day 1 - Linear regression on numerical data",
    "section": "",
    "text": "Today marks the first day of a thousand days of coding.\nHaven taken numerous certificates/courses in computer science and machine learning, I’ve come to the realisation (an obvious one at that) that nothing beats daily project based practice. Exercises from courses rarely cement themselves as it’s easy to merely follow instructions without thoroughly problemsolving.\nToday, day 1, I created a linear regression model on a dataset from Kaggle. Although it’s very minimal and not accurate at all, it is a good first.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 5 - Web scraping.html",
    "href": "posts/Day 5 - Web scraping.html",
    "title": "Day 5 - Web scraping",
    "section": "",
    "text": "Today I wanted to try my hand at web scraping to improve my data fetching skills.\nI did so by scraping all the name and addresses of Rema1000 stores across data and inserting them into a DataFrame.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 16 - Tracking of ISS on globe.html",
    "href": "posts/Day 16 - Tracking of ISS on globe.html",
    "title": "Day 16 - Tracking of ISS on globe",
    "section": "",
    "text": "See jupyter notebook here.\nI didn’t get around to clearning up the code and truly adding comments unfortunately. However, it gets the job done. I also wanted to make it automatic, so that the program would run every minute where you could slowly track the position of the ISS on the globe."
  },
  {
    "objectID": "posts/Day 6 - Multivariate Linear regression.html",
    "href": "posts/Day 6 - Multivariate Linear regression.html",
    "title": "Day 6 - multivariate linear regression",
    "section": "",
    "text": "Today I wanted to try multivariate linear regression\nI did so by using a dataset from the book Statistical Learning with Python, which included a few features of advertising expenditure in relation to sales figures.\nThe linear regression is however quite superficial, and does not go beyond fitting and evaluating model based on mean squared error, as I need to read through more text books on the subject to advance my machine learning skillset.\nThe jupyter notebook can be viewed here."
  },
  {
    "objectID": "posts/Day 4 - API and SQL.html",
    "href": "posts/Day 4 - API and SQL.html",
    "title": "Day 4 - API and SQL",
    "section": "",
    "text": "Today I wanted to try loading data from an API and inserting it into a database, to then retrieve it using pandas.\nI used a guide for fetching and loading data from CoinMarketCap via API and loading that into a SQLite3 database.\nThe jupyter notebook can be viewed here.\nAdditionally this is the code for the python script for fetching and loading the data.\nfrom requests import Request, Session\n\nfrom requests.exceptions import ConnectionError, Timeout, TooManyRedirects\n\nimport json\n\nimport sqlite3 as db\n\n  \n  \n\nurl = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\n\nwith open(\"CMC_api.txt\") as f:\n\napi_key = f.read().strip()\n\n  \n\ndef fetch_data():\n\nparameters = {\n\n'convert':'USD',\n\n}\n\n  \n\nheaders = {\n\n'Accepts': 'application/json',\n\n'X-CMC_PRO_API_KEY': api_key,\n\n  \n\n}\n\n  \n\nsession = Session()\n\nsession.headers.update(headers)\n\n  \n\ntry:\n\nresponse = session.get(url, params=parameters)\n\ndata = json.loads(response.text)\n\nexcept (ConnectionError, Timeout, TooManyRedirects) as e:\n\nprint(e)\n\nreturn data\n\n  \n\ndef load_data():\n\ndata = fetch_data()\n\nconn = db.connect(\"crypto.db\")\n\ncn = conn.cursor()\n\ncn.execute(\"DROP TABLE IF EXISTS crypto_db\")\n\n  \n\ncreate_table_query = \"\"\"\n\nCREATE TABLE IF NOT EXISTS crypto_db\n\n(\n\nID INTEGER PRIMARY KEY AUTOINCREMENT,\n\n\"name\" VARCHAR(100),\n\n\"rank\" INTEGER,\n\n\"symbol\" VARCHAR(10),\n\n\"price_usd\" FLOAT\n\n)\n\n\"\"\"\n\n  \n\ncn.execute(create_table_query)\n\nfor item in data[\"data\"]:\n\ncn.execute(\"\"\"\n\nINSERT INTO crypto_db\n\n(\n\n\"name\",\n\n\"rank\",\n\n\"symbol\",\n\n\"price_usd\"\n\n)\n\nVALUES (?, ?, ?, ?)\n\n\"\"\", (\n\nitem[\"name\"],\n\nitem[\"cmc_rank\"],\n\nitem[\"symbol\"],\n\nitem[\"quote\"][\"USD\"][\"price\"],\n\n))\n\nconn.commit()\n\ncn.close()\n\nconn.close()\n\nprint(\"Loaded Data to SQLite3.\")\n\n  \n  \n\ndef run_etl() -&gt; None:\n\nload_data()\n\n  \n\nif __name__ == \"__main__\":\n\nrun_etl()"
  },
  {
    "objectID": "posts/Day 10 - Retrieving by books by subject with API.html",
    "href": "posts/Day 10 - Retrieving by books by subject with API.html",
    "title": "Day 10 - Retrieving by books by subject with API",
    "section": "",
    "text": "I used this API, to fetch books by subject. Here I created a simple function where it’s possible to insert the desired subject and print them in a dataframe.\nSee code below - can be viewed on github here\nimport requests\nimport pandas as pd\n\ndef retrieve_books_subject(subject):\n    # API URL\n    url = f\"https://openlibrary.org/subjects/{subject}\"\n    \n    params = {\n        \"details\" : \"true\" # In order to receive author information\n    }\n\n    headers = {\n        \"accept\": \"application/json\" # To specify json output format\n    }\n\n    # Get reponse to API\n    response = requests.get(url, headers=headers, params=params)\n    if response.status_code != 200:\n        return print(\"API call failed\")\n\n    # Store response as json format\n    data = response.json()\n    if int(data[\"work_count\"]) == 0:\n        return print(\"No books in this category. Please search for another category\")\n\n    # Initialize books variable for later use\n    books = []\n\n    # Iterate through json object to retrieve specific information (title and author)\n    for keys in data[\"works\"]:\n        # Store title of each book\n        title = keys[\"title\"]\n        authors = []\n        for key in keys[\"authors\"]:\n            # Append each author to a list\n            authors.append(key[\"name\"])\n\n        # Insert title and authors into books variable\n        books.append({\"title\" : title, \"authors\" : authors})\n\n    # Make list into dataframe\n    df_books = pd.DataFrame(books)\n\n    # Remove square brackets from authors columns\n    df_books[\"authors\"] = df_books[\"authors\"].apply(lambda x: \", \".join(x))\n\n    # Return dataframe of fetched books for display\n    return df_books"
  },
  {
    "objectID": "posts/Day 9 - Retrieving image with API.html",
    "href": "posts/Day 9 - Retrieving image with API.html",
    "title": "Day 9 - Retrieving image with API",
    "section": "",
    "text": "I initially wanted to fetch all the youtube videos from my favourite yoga youtuber, Tim Senesi, however the Google API proved too difficult at this time to be able to retrieve data from youtube.\nInstead I created a simple program to fetch and download the astronomy picture of the day from NASA.\nThe jupyter notebook can be viewed here.\n\nCode from program:\n# Libraries\n\nimport requests\n\nfrom dotenv import load_dotenv\n\nimport os\n  \n\n# Load dot environment files\n\nload_dotenv()\n\n\n# Get api key from environment file\n\nAPI_KEY = os.getenv(\"API_KEY\")\n\n# The url of Nasas image api\n\napi_url = \"https://api.nasa.gov/planetary/apod\"\n\n# Inserting api key when calling API\n\nparams = {\n\n\"api_key\": API_KEY\n\n}\n\n# Get response\n\nresponse = requests.get(api_url, params=params)\n\n# Convert response to json format\n\ndata = response.json()\n\n# Saving url of image to variable\n\nimage_url = data[\"hdurl\"]\n\n# Get request to fetch data from image url\n\nimg_data = requests.get(image_url).content\n\n\n# Open new file and write image data to file, where title of file is the title of the image\n\nwith open(f\"{data[\"title\"]}.jpg\", 'wb') as handler:\n\nhandler.write(img_data)"
  },
  {
    "objectID": "posts/Day 14 - Pandas exploration.html",
    "href": "posts/Day 14 - Pandas exploration.html",
    "title": "Day 14 - Pandas exploration",
    "section": "",
    "text": "Decided to dive deeper into pandas by exploration a data set from Kaggle.\nHere I learned to “explode” column to expand columns of lists and then remove leading whitespace to effectively count categorical values.\nSee jupyter notebook here."
  },
  {
    "objectID": "posts/Day 19 - DecisionTreeRegressor.html",
    "href": "posts/Day 19 - DecisionTreeRegressor.html",
    "title": "Day 19 - DecisionTreeRegressor",
    "section": "",
    "text": "I tried my hand at a decision tree regressor today using sklearn.\nThe jupyter notebook can be viewed here"
  },
  {
    "objectID": "posts/Day 18 - pandas.html",
    "href": "posts/Day 18 - pandas.html",
    "title": "Day 18 - Pandas and Altair",
    "section": "",
    "text": "I investigated some data from a “snapsegilde” as my friends group has a competition each year. Here I practiced my pandas and altair skills further.\nThe jupyter notebook can be viewed here"
  },
  {
    "objectID": "posts/Day 11 - Rock, paper, scissor.html",
    "href": "posts/Day 11 - Rock, paper, scissor.html",
    "title": "Day 11 - Rock, Paper, Scissor",
    "section": "",
    "text": "As I am short on time today, I created a simple rock, paper, scissor program in Python. It is not written robustly, but simply gets the job done.\nSee code here: https://github.com/JonSkogland/1000daysofcoding/blob/main/daily-projects/day11_20250621/day11.py"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Jon Skogland.\nThis is my personal page, where I’m going to share thoughts, learnings and things that I pursue.  Click the Posts link to see my posts  You can follow me here:\n\nMy Github: @lokopu"
  }
]